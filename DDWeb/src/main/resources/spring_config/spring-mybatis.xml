<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:tx="http://www.springframework.org/schema/tx" xmlns:aop="http://www.springframework.org/schema/aop"
       xsi:schemaLocation="
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-3.0.xsd
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-3.0.xsd
">
    <!-- 配置数据源 -->
    <bean name="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="url" value="${url}"/>
        <property name="username" value="${username}"/>
        <property name="password" value="${password}"/>

        <!-- 初始化连接大小 -->
        <property name="initialSize" value="0"/>
        <!-- 连接池最大使用连接数量 -->
        <property name="maxActive" value="20"/>
        <!-- 连接池最大空闲 -->
        <property name="maxIdle" value="20"/>
        <!-- 连接池最小空闲 -->
        <property name="minIdle" value="0"/>
        <!-- 获取连接最大等待时间 -->
        <property name="maxWait" value="60000"/>

        <!--
        <property name="poolPreparedStatements" value="true" />
        <property name="maxPoolPreparedStatementPerConnectionSize" value="33" />
        -->

        <property name="validationQuery" value="${validationQuery}"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="testWhileIdle" value="true"/>

        <!-- 配置间隔多久才进行一次检测，检测需要关闭的空闲连接，单位是毫秒 -->
        <property name="timeBetweenEvictionRunsMillis" value="60000"/>
        <!-- 配置一个连接在池中最小生存的时间，单位是毫秒 -->
        <property name="minEvictableIdleTimeMillis" value="25200000"/>

        <!-- 打开removeAbandoned功能：是否自动回收超时连接 -->
        <property name="removeAbandoned" value="true"/>
        <!-- 1800秒，也就是30分钟 -->
        <property name="removeAbandonedTimeout" value="180"/>
        <!-- 关闭abanded连接时输出错误日志 -->
        <property name="logAbandoned" value="true"/>

        <!-- 监控数据库 -->
        <!-- <property name="filters" value="stat" /> -->
        <property name="filters" value="mergeStat"/>
    </bean>

    <!-- mybatis文件 -->
    <bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource"/>
        <!--加载MybatisConfig配置文件-->
        <property name="configLocation" value="classpath:mybatis_config/MybatisConfig.xml"/>
        <!-- 自动扫描mybatis_config目录的*_sql.xml的sql文件 -->
        <property name="mapperLocations" value="classpath:mybatis_config/*_sql.xml"/>
    </bean>

    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.dangdang.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 配置dataSource事务管理器 -->
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>

    <!--注解方式配置事物 -->
    <tx:annotation-driven transaction-manager="transactionManager"/>

    <!-- 拦截器方式配置事物 -->
    <!--<tx:advice id="transactionAdvice" transaction-manager="transactionManager">-->
    <!--<tx:attributes>-->
    <!--&lt;!&ndash;PROPAGATION_REQUIRED:支持当前事务，如果当前没有事务，就新建一个事务。这是最常见的选择。&ndash;&gt;-->
    <!--&lt;!&ndash;PROPAGATION_SUPPORTS:支持当前事务，如果当前没有事务，就以非事务方式执行。&ndash;&gt;-->
    <!--&lt;!&ndash;PROPAGATION_MANDATORY:支持当前事务，如果当前没有事务，就抛出异常。&ndash;&gt;-->
    <!--&lt;!&ndash;PROPAGATION_REQUIRES_NEW:新建事务，如果当前存在事务，把当前事务挂起。&ndash;&gt;-->
    <!--&lt;!&ndash;PROPAGATION_NOT_SUPPORTED:以非事务方式执行操作，如果当前存在事务，就把当前事务挂起。&ndash;&gt;-->
    <!--&lt;!&ndash;PROPAGATION_NEVER:以非事务方式执行，如果当前存在事务，则抛出异常。&ndash;&gt;-->
    <!--<tx:method name="add*" propagation="REQUIRED" />-->
    <!--<tx:method name="append*" propagation="REQUIRED" />-->
    <!--<tx:method name="insert*" propagation="REQUIRED" />-->
    <!--<tx:method name="save*" propagation="REQUIRED" />-->
    <!--<tx:method name="update*" propagation="REQUIRED" />-->
    <!--<tx:method name="modify*" propagation="REQUIRED" />-->
    <!--<tx:method name="edit*" propagation="REQUIRED" />-->
    <!--<tx:method name="delete*" propagation="REQUIRED" />-->
    <!--<tx:method name="remove*" propagation="REQUIRED" />-->
    <!--<tx:method name="repair" propagation="REQUIRED" />-->
    <!--<tx:method name="delAndRepair" propagation="REQUIRED" />-->

    <!--<tx:method name="get*" propagation="SUPPORTS" />-->
    <!--<tx:method name="find*" propagation="SUPPORTS" />-->
    <!--<tx:method name="load*" propagation="SUPPORTS" />-->
    <!--<tx:method name="search*" propagation="SUPPORTS" />-->
    <!--<tx:method name="datagrid*" propagation="SUPPORTS" />-->

    <!--<tx:method name="*" propagation="SUPPORTS" />-->
    <!--</tx:attributes>-->
    <!--</tx:advice>-->
    <!--<aop:config>-->
    <!--<aop:pointcut id="transactionPointcut" expression="execution(* com.dangdang.service.impl.*.*(..))" />-->
    <!--<aop:advisor pointcut-ref="transactionPointcut" advice-ref="transactionAdvice" />-->
    <!--</aop:config>-->


    <!-- 配置druid监控spring jdbc -->
    <!--<bean id="druid-stat-interceptor" class="com.alibaba.druid.support.spring.stat.DruidStatInterceptor">-->
    <!--</bean>-->
    <!--<bean id="druid-stat-pointcut" class="org.springframework.aop.support.JdkRegexpMethodPointcut" scope="prototype">-->
    <!--<property name="patterns">-->
    <!--<list>-->
    <!--<value>sy.service.*</value>-->
    <!--</list>-->
    <!--</property>-->
    <!--</bean>-->
    <!--<aop:config>-->
    <!--<aop:advisor advice-ref="druid-stat-interceptor" pointcut-ref="druid-stat-pointcut" />-->
    <!--</aop:config>-->

</beans>